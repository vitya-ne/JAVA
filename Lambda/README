LAMBDA
functional interface



Решение:

    Lambda1  - Вернуть лямбду, которая печатает “Hello world!”
    Lambda2  - Вернуть лямбду, которая поприветствует того, чье имя будет передано первым аргументом
    Lambda3  - Вернуть лямбду, которая принимает в качестве аргумента предыдущую лямбду, и
                 добавляет вывод “Have a nice day!” после выполнения лямбды
    Lambda4  - Вернуть лямбду, которая возвращает текущее время
    Lambda5  - Вернуть лямбду, которая проверяет строку на наличие в ней email.
                 Под email понимать любую строку, которая ввыглядит как
                 <любые символы>@<любые символы>.<любые символы>
    Lambda6  - К предыдущей лямбде добавить проверку на длину строки (> 10)
    Lambda7  - К предыдущей лямбде добавить отрицание.
    Lambda8  - Вернуть лямбду, которая проверяет число на принадлежность к ряду Фибоначчи.
                 Лямбда должна запоминать ранее вычисленные значения.
    Lambda9  - Вернуть лямбду, которая возвращает сумму двух входных аргументов.
    Lambda10 - К предыдущей лямбде добавить возведение в квадрат
    Lambda11 - Вернуть лямбду, которая возвращает сумму трех входных аргументов
    Lambda12 - Вернуть лямбду, которая возводит число в квадрат
    Lambda13 - Добавить к предыдущей лямбде инкремент перед
    Lambda14 - Добавить к предыдущей лямбде декремент после
    Lambda15 - Вернуть лямбду, которая решает уравнение x^2 + 3x – 1 для заданного x
    Lambda16 - Вернуть лямбду, которая решает уравнение (x^2 + 3x – 1)^2 + 3*(x^2 + 3x – 1) - 1 для заданного x.
                 Необходимо решить задачу переиспользованием предыдущей лямбды.
    Lambda17 - Вернуть лямбду, которая решает уравнение
                 x*x*x + y*y*y + z*z*z + u*u*u + v*v*v для заданных (x,y,z,u,v)
    Lambda18 - Вернуть лямбду, которая запоминает степень, и возвращает лямбду
                 возводящую входящее значение в степень
    Lambda19 - Вернуть лямбду, которая производит композицию двух функций.
                 (f1,f2) => f2(f1(x)) . Для этого реализовать функциональный интерфейс.
                 Пример использования:
                 Пример входа                                           Пример выхода
                 f.compose(x->x*2,x->x-1).apply(10))	                19
                 f.compose(f8.compose(x -> x * x, x -> x - 10),
                   f8.compose(x -> x / 2, x -> x + 1)	                46
    Lambda20 - Вернуть лямбду, которая вернет полином, основанный на переданных коэффициентах
                 Пример входа	                    Пример выхода
                 f.apply(Arrays.asList(2,3,5))	    X -> 2*x*x + 3*x + 5
                 f.apply(Arrays.asList(-5,-10))	    X -> -5*x – 10
                 f.apply(Arrays.asList(8))	        X -> 8
    Lambda21 - Вернуть лямбду, которая кеширует результат некоторой функции, которая является входных аргументом
                 Пример входа	                    Пример выхода
                 f.apply(() -> Math.random())	    0.42
                 f.apply(() -> Math.random())	    0.42
                 f.apply(() -> Math.random())	    0.42
    Lambda22 - Вернуть лямбду, которая запускает переданную функцию f,
                 и в случае исключения перезапускает ее n раз
                 Пример входа	                    Пример выхода
                 Long n = 0;                        2
                 f.apply({
                   if (++n[0] % 2 == 0) throw new Exception("error");
                   else return n[0];
                 })
    Lambda23 - Вернуть лямбду, которая перед и после запуска переданной функции f,
                 вызывает функцию логгера logFunc
                 Пример входа	                    Пример выхода
                 f10.intercept(                     Before 10
                    x -> x + 1,
                    System.out::println).apply(10)
                                                    After 11
    Lambda24 - Вернуть лямбду, представляющую из себя последовательность, которая начинается с переданного x
                 Пример входа	                    Пример выхода
                Supplier<Long> startFrom100 = f.apply(100L);        100
                startFrom100.get();                                 101
                startFrom100.get();                                 102
                startFrom100.get();








